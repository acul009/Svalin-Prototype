// Code generated by ent, DO NOT EDIT.

package revocation

import (
	"rahnit-rmm/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldID, id))
}

// Revocation applies equality check predicate on the "revocation" field. It's identical to RevocationEQ.
func Revocation(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldRevocation, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldHash, v))
}

// Hasher applies equality check predicate on the "hasher" field. It's identical to HasherEQ.
func Hasher(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldHasher, v))
}

// RevocationEQ applies the EQ predicate on the "revocation" field.
func RevocationEQ(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldRevocation, v))
}

// RevocationNEQ applies the NEQ predicate on the "revocation" field.
func RevocationNEQ(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldRevocation, v))
}

// RevocationIn applies the In predicate on the "revocation" field.
func RevocationIn(vs ...[]byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldRevocation, vs...))
}

// RevocationNotIn applies the NotIn predicate on the "revocation" field.
func RevocationNotIn(vs ...[]byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldRevocation, vs...))
}

// RevocationGT applies the GT predicate on the "revocation" field.
func RevocationGT(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldRevocation, v))
}

// RevocationGTE applies the GTE predicate on the "revocation" field.
func RevocationGTE(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldRevocation, v))
}

// RevocationLT applies the LT predicate on the "revocation" field.
func RevocationLT(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldRevocation, v))
}

// RevocationLTE applies the LTE predicate on the "revocation" field.
func RevocationLTE(v []byte) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldRevocation, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldContainsFold(FieldHash, v))
}

// HasherEQ applies the EQ predicate on the "hasher" field.
func HasherEQ(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldHasher, v))
}

// HasherNEQ applies the NEQ predicate on the "hasher" field.
func HasherNEQ(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldHasher, v))
}

// HasherIn applies the In predicate on the "hasher" field.
func HasherIn(vs ...uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldHasher, vs...))
}

// HasherNotIn applies the NotIn predicate on the "hasher" field.
func HasherNotIn(vs ...uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldHasher, vs...))
}

// HasherGT applies the GT predicate on the "hasher" field.
func HasherGT(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldHasher, v))
}

// HasherGTE applies the GTE predicate on the "hasher" field.
func HasherGTE(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldHasher, v))
}

// HasherLT applies the LT predicate on the "hasher" field.
func HasherLT(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldHasher, v))
}

// HasherLTE applies the LTE predicate on the "hasher" field.
func HasherLTE(v uint64) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldHasher, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.NotPredicates(p))
}
