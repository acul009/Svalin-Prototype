// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/rahn-it/svalin/ent/revocation"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RevocationCreate is the builder for creating a Revocation entity.
type RevocationCreate struct {
	config
	mutation *RevocationMutation
	hooks    []Hook
}

// SetRevocation sets the "revocation" field.
func (rc *RevocationCreate) SetRevocation(b []byte) *RevocationCreate {
	rc.mutation.SetRevocation(b)
	return rc
}

// SetHash sets the "hash" field.
func (rc *RevocationCreate) SetHash(s string) *RevocationCreate {
	rc.mutation.SetHash(s)
	return rc
}

// SetHasher sets the "hasher" field.
func (rc *RevocationCreate) SetHasher(u uint64) *RevocationCreate {
	rc.mutation.SetHasher(u)
	return rc
}

// Mutation returns the RevocationMutation object of the builder.
func (rc *RevocationCreate) Mutation() *RevocationMutation {
	return rc.mutation
}

// Save creates the Revocation in the database.
func (rc *RevocationCreate) Save(ctx context.Context) (*Revocation, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RevocationCreate) SaveX(ctx context.Context) *Revocation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RevocationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RevocationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RevocationCreate) check() error {
	if _, ok := rc.mutation.Revocation(); !ok {
		return &ValidationError{Name: "revocation", err: errors.New(`ent: missing required field "Revocation.revocation"`)}
	}
	if _, ok := rc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Revocation.hash"`)}
	}
	if v, ok := rc.mutation.Hash(); ok {
		if err := revocation.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Revocation.hash": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Hasher(); !ok {
		return &ValidationError{Name: "hasher", err: errors.New(`ent: missing required field "Revocation.hasher"`)}
	}
	return nil
}

func (rc *RevocationCreate) sqlSave(ctx context.Context) (*Revocation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RevocationCreate) createSpec() (*Revocation, *sqlgraph.CreateSpec) {
	var (
		_node = &Revocation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(revocation.Table, sqlgraph.NewFieldSpec(revocation.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Revocation(); ok {
		_spec.SetField(revocation.FieldRevocation, field.TypeBytes, value)
		_node.Revocation = value
	}
	if value, ok := rc.mutation.Hash(); ok {
		_spec.SetField(revocation.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := rc.mutation.Hasher(); ok {
		_spec.SetField(revocation.FieldHasher, field.TypeUint64, value)
		_node.Hasher = value
	}
	return _node, _spec
}

// RevocationCreateBulk is the builder for creating many Revocation entities in bulk.
type RevocationCreateBulk struct {
	config
	err      error
	builders []*RevocationCreate
}

// Save creates the Revocation entities in the database.
func (rcb *RevocationCreateBulk) Save(ctx context.Context) ([]*Revocation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Revocation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RevocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RevocationCreateBulk) SaveX(ctx context.Context) []*Revocation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RevocationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RevocationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
