// Code generated by ent, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// EdgeTunnelConfig holds the string denoting the tunnel_config edge name in mutations.
	EdgeTunnelConfig = "tunnel_config"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// TunnelConfigTable is the table that holds the tunnel_config relation/edge.
	TunnelConfigTable = "devices"
	// TunnelConfigInverseTable is the table name for the TunnelConfig entity.
	// It exists in this package in order to avoid circular dependency with the "tunnelconfig" package.
	TunnelConfigInverseTable = "tunnel_configs"
	// TunnelConfigColumn is the table column denoting the tunnel_config relation/edge.
	TunnelConfigColumn = "tunnel_config_device"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldPublicKey,
	FieldCertificate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "devices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tunnel_config_device",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PublicKeyValidator is a validator for the "public_key" field. It is called by the builders before save.
	PublicKeyValidator func(string) error
	// CertificateValidator is a validator for the "certificate" field. It is called by the builders before save.
	CertificateValidator func(string) error
)

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicKey orders the results by the public_key field.
func ByPublicKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicKey, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByTunnelConfigField orders the results by tunnel_config field.
func ByTunnelConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTunnelConfigStep(), sql.OrderByField(field, opts...))
	}
}
func newTunnelConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TunnelConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TunnelConfigTable, TunnelConfigColumn),
	)
}
