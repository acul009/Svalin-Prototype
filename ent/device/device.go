// Code generated by ent, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// EdgeConfigs holds the string denoting the configs edge name in mutations.
	EdgeConfigs = "configs"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// ConfigsTable is the table that holds the configs relation/edge.
	ConfigsTable = "host_configs"
	// ConfigsInverseTable is the table name for the HostConfig entity.
	// It exists in this package in order to avoid circular dependency with the "hostconfig" package.
	ConfigsInverseTable = "host_configs"
	// ConfigsColumn is the table column denoting the configs relation/edge.
	ConfigsColumn = "device_configs"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldPublicKey,
	FieldCertificate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PublicKeyValidator is a validator for the "public_key" field. It is called by the builders before save.
	PublicKeyValidator func(string) error
	// CertificateValidator is a validator for the "certificate" field. It is called by the builders before save.
	CertificateValidator func(string) error
)

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicKey orders the results by the public_key field.
func ByPublicKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicKey, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByConfigsCount orders the results by configs count.
func ByConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigsStep(), opts...)
	}
}

// ByConfigs orders the results by configs terms.
func ByConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigsTable, ConfigsColumn),
	)
}
