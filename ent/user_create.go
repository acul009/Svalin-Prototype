// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rahnit-rmm/ent/user"
	"rahnit-rmm/util"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetPasswordClientHashingOptions sets the "password_client_hashing_options" field.
func (uc *UserCreate) SetPasswordClientHashingOptions(up *util.ArgonParameters) *UserCreate {
	uc.mutation.SetPasswordClientHashingOptions(up)
	return uc
}

// SetPasswordServerHashingOptions sets the "password_server_hashing_options" field.
func (uc *UserCreate) SetPasswordServerHashingOptions(up *util.ArgonParameters) *UserCreate {
	uc.mutation.SetPasswordServerHashingOptions(up)
	return uc
}

// SetPasswordDoubleHashed sets the "password_double_hashed" field.
func (uc *UserCreate) SetPasswordDoubleHashed(b []byte) *UserCreate {
	uc.mutation.SetPasswordDoubleHashed(b)
	return uc
}

// SetCertificate sets the "certificate" field.
func (uc *UserCreate) SetCertificate(s string) *UserCreate {
	uc.mutation.SetCertificate(s)
	return uc
}

// SetPublicKey sets the "public_key" field.
func (uc *UserCreate) SetPublicKey(s string) *UserCreate {
	uc.mutation.SetPublicKey(s)
	return uc
}

// SetEncryptedPrivateKey sets the "encrypted_private_key" field.
func (uc *UserCreate) SetEncryptedPrivateKey(s string) *UserCreate {
	uc.mutation.SetEncryptedPrivateKey(s)
	return uc
}

// SetTotpSecret sets the "totp_secret" field.
func (uc *UserCreate) SetTotpSecret(s string) *UserCreate {
	uc.mutation.SetTotpSecret(s)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PasswordClientHashingOptions(); !ok {
		return &ValidationError{Name: "password_client_hashing_options", err: errors.New(`ent: missing required field "User.password_client_hashing_options"`)}
	}
	if _, ok := uc.mutation.PasswordServerHashingOptions(); !ok {
		return &ValidationError{Name: "password_server_hashing_options", err: errors.New(`ent: missing required field "User.password_server_hashing_options"`)}
	}
	if _, ok := uc.mutation.PasswordDoubleHashed(); !ok {
		return &ValidationError{Name: "password_double_hashed", err: errors.New(`ent: missing required field "User.password_double_hashed"`)}
	}
	if v, ok := uc.mutation.PasswordDoubleHashed(); ok {
		if err := user.PasswordDoubleHashedValidator(v); err != nil {
			return &ValidationError{Name: "password_double_hashed", err: fmt.Errorf(`ent: validator failed for field "User.password_double_hashed": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Certificate(); !ok {
		return &ValidationError{Name: "certificate", err: errors.New(`ent: missing required field "User.certificate"`)}
	}
	if v, ok := uc.mutation.Certificate(); ok {
		if err := user.CertificateValidator(v); err != nil {
			return &ValidationError{Name: "certificate", err: fmt.Errorf(`ent: validator failed for field "User.certificate": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "User.public_key"`)}
	}
	if v, ok := uc.mutation.PublicKey(); ok {
		if err := user.PublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "public_key", err: fmt.Errorf(`ent: validator failed for field "User.public_key": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EncryptedPrivateKey(); !ok {
		return &ValidationError{Name: "encrypted_private_key", err: errors.New(`ent: missing required field "User.encrypted_private_key"`)}
	}
	if v, ok := uc.mutation.EncryptedPrivateKey(); ok {
		if err := user.EncryptedPrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "encrypted_private_key", err: fmt.Errorf(`ent: validator failed for field "User.encrypted_private_key": %w`, err)}
		}
	}
	if _, ok := uc.mutation.TotpSecret(); !ok {
		return &ValidationError{Name: "totp_secret", err: errors.New(`ent: missing required field "User.totp_secret"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.PasswordClientHashingOptions(); ok {
		_spec.SetField(user.FieldPasswordClientHashingOptions, field.TypeJSON, value)
		_node.PasswordClientHashingOptions = value
	}
	if value, ok := uc.mutation.PasswordServerHashingOptions(); ok {
		_spec.SetField(user.FieldPasswordServerHashingOptions, field.TypeJSON, value)
		_node.PasswordServerHashingOptions = value
	}
	if value, ok := uc.mutation.PasswordDoubleHashed(); ok {
		_spec.SetField(user.FieldPasswordDoubleHashed, field.TypeBytes, value)
		_node.PasswordDoubleHashed = value
	}
	if value, ok := uc.mutation.Certificate(); ok {
		_spec.SetField(user.FieldCertificate, field.TypeString, value)
		_node.Certificate = value
	}
	if value, ok := uc.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeString, value)
		_node.PublicKey = value
	}
	if value, ok := uc.mutation.EncryptedPrivateKey(); ok {
		_spec.SetField(user.FieldEncryptedPrivateKey, field.TypeString, value)
		_node.EncryptedPrivateKey = value
	}
	if value, ok := uc.mutation.TotpSecret(); ok {
		_spec.SetField(user.FieldTotpSecret, field.TypeString, value)
		_node.TotpSecret = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
