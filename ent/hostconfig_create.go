// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rahnit-rmm/ent/device"
	"rahnit-rmm/ent/hostconfig"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HostConfigCreate is the builder for creating a HostConfig entity.
type HostConfigCreate struct {
	config
	mutation *HostConfigMutation
	hooks    []Hook
}

// SetConfig sets the "config" field.
func (hcc *HostConfigCreate) SetConfig(b []byte) *HostConfigCreate {
	hcc.mutation.SetConfig(b)
	return hcc
}

// SetType sets the "type" field.
func (hcc *HostConfigCreate) SetType(s string) *HostConfigCreate {
	hcc.mutation.SetType(s)
	return hcc
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (hcc *HostConfigCreate) SetDeviceID(id int) *HostConfigCreate {
	hcc.mutation.SetDeviceID(id)
	return hcc
}

// SetDevice sets the "device" edge to the Device entity.
func (hcc *HostConfigCreate) SetDevice(d *Device) *HostConfigCreate {
	return hcc.SetDeviceID(d.ID)
}

// Mutation returns the HostConfigMutation object of the builder.
func (hcc *HostConfigCreate) Mutation() *HostConfigMutation {
	return hcc.mutation
}

// Save creates the HostConfig in the database.
func (hcc *HostConfigCreate) Save(ctx context.Context) (*HostConfig, error) {
	return withHooks(ctx, hcc.sqlSave, hcc.mutation, hcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HostConfigCreate) SaveX(ctx context.Context) *HostConfig {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcc *HostConfigCreate) Exec(ctx context.Context) error {
	_, err := hcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcc *HostConfigCreate) ExecX(ctx context.Context) {
	if err := hcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HostConfigCreate) check() error {
	if _, ok := hcc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "HostConfig.config"`)}
	}
	if v, ok := hcc.mutation.Config(); ok {
		if err := hostconfig.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "HostConfig.config": %w`, err)}
		}
	}
	if _, ok := hcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "HostConfig.type"`)}
	}
	if v, ok := hcc.mutation.GetType(); ok {
		if err := hostconfig.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "HostConfig.type": %w`, err)}
		}
	}
	if _, ok := hcc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required edge "HostConfig.device"`)}
	}
	return nil
}

func (hcc *HostConfigCreate) sqlSave(ctx context.Context) (*HostConfig, error) {
	if err := hcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hcc.mutation.id = &_node.ID
	hcc.mutation.done = true
	return _node, nil
}

func (hcc *HostConfigCreate) createSpec() (*HostConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &HostConfig{config: hcc.config}
		_spec = sqlgraph.NewCreateSpec(hostconfig.Table, sqlgraph.NewFieldSpec(hostconfig.FieldID, field.TypeInt))
	)
	if value, ok := hcc.mutation.Config(); ok {
		_spec.SetField(hostconfig.FieldConfig, field.TypeBytes, value)
		_node.Config = value
	}
	if value, ok := hcc.mutation.GetType(); ok {
		_spec.SetField(hostconfig.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := hcc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostconfig.DeviceTable,
			Columns: []string{hostconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostConfigCreateBulk is the builder for creating many HostConfig entities in bulk.
type HostConfigCreateBulk struct {
	config
	err      error
	builders []*HostConfigCreate
}

// Save creates the HostConfig entities in the database.
func (hccb *HostConfigCreateBulk) Save(ctx context.Context) ([]*HostConfig, error) {
	if hccb.err != nil {
		return nil, hccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HostConfig, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hccb *HostConfigCreateBulk) SaveX(ctx context.Context) []*HostConfig {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hccb *HostConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := hccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hccb *HostConfigCreateBulk) ExecX(ctx context.Context) {
	if err := hccb.Exec(ctx); err != nil {
		panic(err)
	}
}
