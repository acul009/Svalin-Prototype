// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rahnit-rmm/ent/predicate"
	"rahnit-rmm/ent/revocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RevocationUpdate is the builder for updating Revocation entities.
type RevocationUpdate struct {
	config
	hooks    []Hook
	mutation *RevocationMutation
}

// Where appends a list predicates to the RevocationUpdate builder.
func (ru *RevocationUpdate) Where(ps ...predicate.Revocation) *RevocationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRevocation sets the "revocation" field.
func (ru *RevocationUpdate) SetRevocation(b []byte) *RevocationUpdate {
	ru.mutation.SetRevocation(b)
	return ru
}

// SetHash sets the "hash" field.
func (ru *RevocationUpdate) SetHash(s string) *RevocationUpdate {
	ru.mutation.SetHash(s)
	return ru
}

// SetHasher sets the "hasher" field.
func (ru *RevocationUpdate) SetHasher(u uint64) *RevocationUpdate {
	ru.mutation.ResetHasher()
	ru.mutation.SetHasher(u)
	return ru
}

// AddHasher adds u to the "hasher" field.
func (ru *RevocationUpdate) AddHasher(u int64) *RevocationUpdate {
	ru.mutation.AddHasher(u)
	return ru
}

// Mutation returns the RevocationMutation object of the builder.
func (ru *RevocationUpdate) Mutation() *RevocationMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RevocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RevocationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RevocationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RevocationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RevocationUpdate) check() error {
	if v, ok := ru.mutation.Hash(); ok {
		if err := revocation.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Revocation.hash": %w`, err)}
		}
	}
	return nil
}

func (ru *RevocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(revocation.Table, revocation.Columns, sqlgraph.NewFieldSpec(revocation.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Revocation(); ok {
		_spec.SetField(revocation.FieldRevocation, field.TypeBytes, value)
	}
	if value, ok := ru.mutation.Hash(); ok {
		_spec.SetField(revocation.FieldHash, field.TypeString, value)
	}
	if value, ok := ru.mutation.Hasher(); ok {
		_spec.SetField(revocation.FieldHasher, field.TypeUint64, value)
	}
	if value, ok := ru.mutation.AddedHasher(); ok {
		_spec.AddField(revocation.FieldHasher, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RevocationUpdateOne is the builder for updating a single Revocation entity.
type RevocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RevocationMutation
}

// SetRevocation sets the "revocation" field.
func (ruo *RevocationUpdateOne) SetRevocation(b []byte) *RevocationUpdateOne {
	ruo.mutation.SetRevocation(b)
	return ruo
}

// SetHash sets the "hash" field.
func (ruo *RevocationUpdateOne) SetHash(s string) *RevocationUpdateOne {
	ruo.mutation.SetHash(s)
	return ruo
}

// SetHasher sets the "hasher" field.
func (ruo *RevocationUpdateOne) SetHasher(u uint64) *RevocationUpdateOne {
	ruo.mutation.ResetHasher()
	ruo.mutation.SetHasher(u)
	return ruo
}

// AddHasher adds u to the "hasher" field.
func (ruo *RevocationUpdateOne) AddHasher(u int64) *RevocationUpdateOne {
	ruo.mutation.AddHasher(u)
	return ruo
}

// Mutation returns the RevocationMutation object of the builder.
func (ruo *RevocationUpdateOne) Mutation() *RevocationMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RevocationUpdate builder.
func (ruo *RevocationUpdateOne) Where(ps ...predicate.Revocation) *RevocationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RevocationUpdateOne) Select(field string, fields ...string) *RevocationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Revocation entity.
func (ruo *RevocationUpdateOne) Save(ctx context.Context) (*Revocation, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RevocationUpdateOne) SaveX(ctx context.Context) *Revocation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RevocationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RevocationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RevocationUpdateOne) check() error {
	if v, ok := ruo.mutation.Hash(); ok {
		if err := revocation.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Revocation.hash": %w`, err)}
		}
	}
	return nil
}

func (ruo *RevocationUpdateOne) sqlSave(ctx context.Context) (_node *Revocation, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(revocation.Table, revocation.Columns, sqlgraph.NewFieldSpec(revocation.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Revocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, revocation.FieldID)
		for _, f := range fields {
			if !revocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != revocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Revocation(); ok {
		_spec.SetField(revocation.FieldRevocation, field.TypeBytes, value)
	}
	if value, ok := ruo.mutation.Hash(); ok {
		_spec.SetField(revocation.FieldHash, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Hasher(); ok {
		_spec.SetField(revocation.FieldHasher, field.TypeUint64, value)
	}
	if value, ok := ruo.mutation.AddedHasher(); ok {
		_spec.AddField(revocation.FieldHasher, field.TypeUint64, value)
	}
	_node = &Revocation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
