// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rahnit-rmm/ent/device"
	"rahnit-rmm/ent/predicate"
	"rahnit-rmm/ent/revocation"
	"rahnit-rmm/ent/tunnelconfig"
	"rahnit-rmm/ent/user"
	"rahnit-rmm/util"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice       = "Device"
	TypeRevocation   = "Revocation"
	TypeTunnelConfig = "TunnelConfig"
	TypeUser         = "User"
)

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	public_key           *string
	certificate          *string
	clearedFields        map[string]struct{}
	tunnel_config        *int
	clearedtunnel_config bool
	done                 bool
	oldValue             func(context.Context) (*Device, error)
	predicates           []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPublicKey sets the "public_key" field.
func (m *DeviceMutation) SetPublicKey(s string) {
	m.public_key = &s
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *DeviceMutation) PublicKey() (r string, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *DeviceMutation) ResetPublicKey() {
	m.public_key = nil
}

// SetCertificate sets the "certificate" field.
func (m *DeviceMutation) SetCertificate(s string) {
	m.certificate = &s
}

// Certificate returns the value of the "certificate" field in the mutation.
func (m *DeviceMutation) Certificate() (r string, exists bool) {
	v := m.certificate
	if v == nil {
		return
	}
	return *v, true
}

// OldCertificate returns the old "certificate" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCertificate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCertificate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCertificate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCertificate: %w", err)
	}
	return oldValue.Certificate, nil
}

// ResetCertificate resets all changes to the "certificate" field.
func (m *DeviceMutation) ResetCertificate() {
	m.certificate = nil
}

// SetTunnelConfigID sets the "tunnel_config" edge to the TunnelConfig entity by id.
func (m *DeviceMutation) SetTunnelConfigID(id int) {
	m.tunnel_config = &id
}

// ClearTunnelConfig clears the "tunnel_config" edge to the TunnelConfig entity.
func (m *DeviceMutation) ClearTunnelConfig() {
	m.clearedtunnel_config = true
}

// TunnelConfigCleared reports if the "tunnel_config" edge to the TunnelConfig entity was cleared.
func (m *DeviceMutation) TunnelConfigCleared() bool {
	return m.clearedtunnel_config
}

// TunnelConfigID returns the "tunnel_config" edge ID in the mutation.
func (m *DeviceMutation) TunnelConfigID() (id int, exists bool) {
	if m.tunnel_config != nil {
		return *m.tunnel_config, true
	}
	return
}

// TunnelConfigIDs returns the "tunnel_config" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TunnelConfigID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) TunnelConfigIDs() (ids []int) {
	if id := m.tunnel_config; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTunnelConfig resets all changes to the "tunnel_config" edge.
func (m *DeviceMutation) ResetTunnelConfig() {
	m.tunnel_config = nil
	m.clearedtunnel_config = false
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Device, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.public_key != nil {
		fields = append(fields, device.FieldPublicKey)
	}
	if m.certificate != nil {
		fields = append(fields, device.FieldCertificate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldPublicKey:
		return m.PublicKey()
	case device.FieldCertificate:
		return m.Certificate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case device.FieldCertificate:
		return m.OldCertificate(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case device.FieldCertificate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCertificate(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case device.FieldCertificate:
		m.ResetCertificate()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tunnel_config != nil {
		edges = append(edges, device.EdgeTunnelConfig)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeTunnelConfig:
		if id := m.tunnel_config; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtunnel_config {
		edges = append(edges, device.EdgeTunnelConfig)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeTunnelConfig:
		return m.clearedtunnel_config
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeTunnelConfig:
		m.ClearTunnelConfig()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeTunnelConfig:
		m.ResetTunnelConfig()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// RevocationMutation represents an operation that mutates the Revocation nodes in the graph.
type RevocationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	revocation    *[]byte
	hash          *string
	hasher        *uint64
	addhasher     *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Revocation, error)
	predicates    []predicate.Revocation
}

var _ ent.Mutation = (*RevocationMutation)(nil)

// revocationOption allows management of the mutation configuration using functional options.
type revocationOption func(*RevocationMutation)

// newRevocationMutation creates new mutation for the Revocation entity.
func newRevocationMutation(c config, op Op, opts ...revocationOption) *RevocationMutation {
	m := &RevocationMutation{
		config:        c,
		op:            op,
		typ:           TypeRevocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRevocationID sets the ID field of the mutation.
func withRevocationID(id int) revocationOption {
	return func(m *RevocationMutation) {
		var (
			err   error
			once  sync.Once
			value *Revocation
		)
		m.oldValue = func(ctx context.Context) (*Revocation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Revocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRevocation sets the old Revocation of the mutation.
func withRevocation(node *Revocation) revocationOption {
	return func(m *RevocationMutation) {
		m.oldValue = func(context.Context) (*Revocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RevocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RevocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RevocationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RevocationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Revocation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRevocation sets the "revocation" field.
func (m *RevocationMutation) SetRevocation(b []byte) {
	m.revocation = &b
}

// Revocation returns the value of the "revocation" field in the mutation.
func (m *RevocationMutation) Revocation() (r []byte, exists bool) {
	v := m.revocation
	if v == nil {
		return
	}
	return *v, true
}

// OldRevocation returns the old "revocation" field's value of the Revocation entity.
// If the Revocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RevocationMutation) OldRevocation(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevocation: %w", err)
	}
	return oldValue.Revocation, nil
}

// ResetRevocation resets all changes to the "revocation" field.
func (m *RevocationMutation) ResetRevocation() {
	m.revocation = nil
}

// SetHash sets the "hash" field.
func (m *RevocationMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *RevocationMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Revocation entity.
// If the Revocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RevocationMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *RevocationMutation) ResetHash() {
	m.hash = nil
}

// SetHasher sets the "hasher" field.
func (m *RevocationMutation) SetHasher(u uint64) {
	m.hasher = &u
	m.addhasher = nil
}

// Hasher returns the value of the "hasher" field in the mutation.
func (m *RevocationMutation) Hasher() (r uint64, exists bool) {
	v := m.hasher
	if v == nil {
		return
	}
	return *v, true
}

// OldHasher returns the old "hasher" field's value of the Revocation entity.
// If the Revocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RevocationMutation) OldHasher(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasher is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasher requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasher: %w", err)
	}
	return oldValue.Hasher, nil
}

// AddHasher adds u to the "hasher" field.
func (m *RevocationMutation) AddHasher(u int64) {
	if m.addhasher != nil {
		*m.addhasher += u
	} else {
		m.addhasher = &u
	}
}

// AddedHasher returns the value that was added to the "hasher" field in this mutation.
func (m *RevocationMutation) AddedHasher() (r int64, exists bool) {
	v := m.addhasher
	if v == nil {
		return
	}
	return *v, true
}

// ResetHasher resets all changes to the "hasher" field.
func (m *RevocationMutation) ResetHasher() {
	m.hasher = nil
	m.addhasher = nil
}

// Where appends a list predicates to the RevocationMutation builder.
func (m *RevocationMutation) Where(ps ...predicate.Revocation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RevocationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RevocationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Revocation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RevocationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RevocationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Revocation).
func (m *RevocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RevocationMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.revocation != nil {
		fields = append(fields, revocation.FieldRevocation)
	}
	if m.hash != nil {
		fields = append(fields, revocation.FieldHash)
	}
	if m.hasher != nil {
		fields = append(fields, revocation.FieldHasher)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RevocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case revocation.FieldRevocation:
		return m.Revocation()
	case revocation.FieldHash:
		return m.Hash()
	case revocation.FieldHasher:
		return m.Hasher()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RevocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case revocation.FieldRevocation:
		return m.OldRevocation(ctx)
	case revocation.FieldHash:
		return m.OldHash(ctx)
	case revocation.FieldHasher:
		return m.OldHasher(ctx)
	}
	return nil, fmt.Errorf("unknown Revocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RevocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case revocation.FieldRevocation:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevocation(v)
		return nil
	case revocation.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case revocation.FieldHasher:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasher(v)
		return nil
	}
	return fmt.Errorf("unknown Revocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RevocationMutation) AddedFields() []string {
	var fields []string
	if m.addhasher != nil {
		fields = append(fields, revocation.FieldHasher)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RevocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case revocation.FieldHasher:
		return m.AddedHasher()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RevocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case revocation.FieldHasher:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHasher(v)
		return nil
	}
	return fmt.Errorf("unknown Revocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RevocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RevocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RevocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Revocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RevocationMutation) ResetField(name string) error {
	switch name {
	case revocation.FieldRevocation:
		m.ResetRevocation()
		return nil
	case revocation.FieldHash:
		m.ResetHash()
		return nil
	case revocation.FieldHasher:
		m.ResetHasher()
		return nil
	}
	return fmt.Errorf("unknown Revocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RevocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RevocationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RevocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RevocationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RevocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RevocationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RevocationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Revocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RevocationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Revocation edge %s", name)
}

// TunnelConfigMutation represents an operation that mutates the TunnelConfig nodes in the graph.
type TunnelConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_config       *[]byte
	clearedFields map[string]struct{}
	device        *int
	cleareddevice bool
	done          bool
	oldValue      func(context.Context) (*TunnelConfig, error)
	predicates    []predicate.TunnelConfig
}

var _ ent.Mutation = (*TunnelConfigMutation)(nil)

// tunnelconfigOption allows management of the mutation configuration using functional options.
type tunnelconfigOption func(*TunnelConfigMutation)

// newTunnelConfigMutation creates new mutation for the TunnelConfig entity.
func newTunnelConfigMutation(c config, op Op, opts ...tunnelconfigOption) *TunnelConfigMutation {
	m := &TunnelConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeTunnelConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTunnelConfigID sets the ID field of the mutation.
func withTunnelConfigID(id int) tunnelconfigOption {
	return func(m *TunnelConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *TunnelConfig
		)
		m.oldValue = func(ctx context.Context) (*TunnelConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TunnelConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTunnelConfig sets the old TunnelConfig of the mutation.
func withTunnelConfig(node *TunnelConfig) tunnelconfigOption {
	return func(m *TunnelConfigMutation) {
		m.oldValue = func(context.Context) (*TunnelConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TunnelConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TunnelConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TunnelConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TunnelConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TunnelConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetConfig sets the "config" field.
func (m *TunnelConfigMutation) SetConfig(b []byte) {
	m._config = &b
}

// Config returns the value of the "config" field in the mutation.
func (m *TunnelConfigMutation) Config() (r []byte, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the TunnelConfig entity.
// If the TunnelConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TunnelConfigMutation) OldConfig(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *TunnelConfigMutation) ResetConfig() {
	m._config = nil
}

// SetDeviceID sets the "device" edge to the Device entity by id.
func (m *TunnelConfigMutation) SetDeviceID(id int) {
	m.device = &id
}

// ClearDevice clears the "device" edge to the Device entity.
func (m *TunnelConfigMutation) ClearDevice() {
	m.cleareddevice = true
}

// DeviceCleared reports if the "device" edge to the Device entity was cleared.
func (m *TunnelConfigMutation) DeviceCleared() bool {
	return m.cleareddevice
}

// DeviceID returns the "device" edge ID in the mutation.
func (m *TunnelConfigMutation) DeviceID() (id int, exists bool) {
	if m.device != nil {
		return *m.device, true
	}
	return
}

// DeviceIDs returns the "device" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeviceID instead. It exists only for internal usage by the builders.
func (m *TunnelConfigMutation) DeviceIDs() (ids []int) {
	if id := m.device; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDevice resets all changes to the "device" edge.
func (m *TunnelConfigMutation) ResetDevice() {
	m.device = nil
	m.cleareddevice = false
}

// Where appends a list predicates to the TunnelConfigMutation builder.
func (m *TunnelConfigMutation) Where(ps ...predicate.TunnelConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TunnelConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TunnelConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TunnelConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TunnelConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TunnelConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TunnelConfig).
func (m *TunnelConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TunnelConfigMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._config != nil {
		fields = append(fields, tunnelconfig.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TunnelConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tunnelconfig.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TunnelConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tunnelconfig.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown TunnelConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TunnelConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tunnelconfig.FieldConfig:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown TunnelConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TunnelConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TunnelConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TunnelConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TunnelConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TunnelConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TunnelConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TunnelConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TunnelConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TunnelConfigMutation) ResetField(name string) error {
	switch name {
	case tunnelconfig.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown TunnelConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TunnelConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.device != nil {
		edges = append(edges, tunnelconfig.EdgeDevice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TunnelConfigMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tunnelconfig.EdgeDevice:
		if id := m.device; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TunnelConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TunnelConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TunnelConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddevice {
		edges = append(edges, tunnelconfig.EdgeDevice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TunnelConfigMutation) EdgeCleared(name string) bool {
	switch name {
	case tunnelconfig.EdgeDevice:
		return m.cleareddevice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TunnelConfigMutation) ClearEdge(name string) error {
	switch name {
	case tunnelconfig.EdgeDevice:
		m.ClearDevice()
		return nil
	}
	return fmt.Errorf("unknown TunnelConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TunnelConfigMutation) ResetEdge(name string) error {
	switch name {
	case tunnelconfig.EdgeDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown TunnelConfig edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                              Op
	typ                             string
	id                              *int
	username                        *string
	password_client_hashing_options **util.ArgonParameters
	password_server_hashing_options **util.ArgonParameters
	password_double_hashed          *[]byte
	certificate                     *string
	public_key                      *string
	encrypted_private_key           *[]byte
	totp_secret                     *string
	clearedFields                   map[string]struct{}
	done                            bool
	oldValue                        func(context.Context) (*User, error)
	predicates                      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPasswordClientHashingOptions sets the "password_client_hashing_options" field.
func (m *UserMutation) SetPasswordClientHashingOptions(up *util.ArgonParameters) {
	m.password_client_hashing_options = &up
}

// PasswordClientHashingOptions returns the value of the "password_client_hashing_options" field in the mutation.
func (m *UserMutation) PasswordClientHashingOptions() (r *util.ArgonParameters, exists bool) {
	v := m.password_client_hashing_options
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordClientHashingOptions returns the old "password_client_hashing_options" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordClientHashingOptions(ctx context.Context) (v *util.ArgonParameters, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordClientHashingOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordClientHashingOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordClientHashingOptions: %w", err)
	}
	return oldValue.PasswordClientHashingOptions, nil
}

// ResetPasswordClientHashingOptions resets all changes to the "password_client_hashing_options" field.
func (m *UserMutation) ResetPasswordClientHashingOptions() {
	m.password_client_hashing_options = nil
}

// SetPasswordServerHashingOptions sets the "password_server_hashing_options" field.
func (m *UserMutation) SetPasswordServerHashingOptions(up *util.ArgonParameters) {
	m.password_server_hashing_options = &up
}

// PasswordServerHashingOptions returns the value of the "password_server_hashing_options" field in the mutation.
func (m *UserMutation) PasswordServerHashingOptions() (r *util.ArgonParameters, exists bool) {
	v := m.password_server_hashing_options
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordServerHashingOptions returns the old "password_server_hashing_options" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordServerHashingOptions(ctx context.Context) (v *util.ArgonParameters, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordServerHashingOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordServerHashingOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordServerHashingOptions: %w", err)
	}
	return oldValue.PasswordServerHashingOptions, nil
}

// ResetPasswordServerHashingOptions resets all changes to the "password_server_hashing_options" field.
func (m *UserMutation) ResetPasswordServerHashingOptions() {
	m.password_server_hashing_options = nil
}

// SetPasswordDoubleHashed sets the "password_double_hashed" field.
func (m *UserMutation) SetPasswordDoubleHashed(b []byte) {
	m.password_double_hashed = &b
}

// PasswordDoubleHashed returns the value of the "password_double_hashed" field in the mutation.
func (m *UserMutation) PasswordDoubleHashed() (r []byte, exists bool) {
	v := m.password_double_hashed
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordDoubleHashed returns the old "password_double_hashed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordDoubleHashed(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordDoubleHashed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordDoubleHashed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordDoubleHashed: %w", err)
	}
	return oldValue.PasswordDoubleHashed, nil
}

// ResetPasswordDoubleHashed resets all changes to the "password_double_hashed" field.
func (m *UserMutation) ResetPasswordDoubleHashed() {
	m.password_double_hashed = nil
}

// SetCertificate sets the "certificate" field.
func (m *UserMutation) SetCertificate(s string) {
	m.certificate = &s
}

// Certificate returns the value of the "certificate" field in the mutation.
func (m *UserMutation) Certificate() (r string, exists bool) {
	v := m.certificate
	if v == nil {
		return
	}
	return *v, true
}

// OldCertificate returns the old "certificate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCertificate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCertificate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCertificate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCertificate: %w", err)
	}
	return oldValue.Certificate, nil
}

// ResetCertificate resets all changes to the "certificate" field.
func (m *UserMutation) ResetCertificate() {
	m.certificate = nil
}

// SetPublicKey sets the "public_key" field.
func (m *UserMutation) SetPublicKey(s string) {
	m.public_key = &s
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *UserMutation) PublicKey() (r string, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *UserMutation) ResetPublicKey() {
	m.public_key = nil
}

// SetEncryptedPrivateKey sets the "encrypted_private_key" field.
func (m *UserMutation) SetEncryptedPrivateKey(b []byte) {
	m.encrypted_private_key = &b
}

// EncryptedPrivateKey returns the value of the "encrypted_private_key" field in the mutation.
func (m *UserMutation) EncryptedPrivateKey() (r []byte, exists bool) {
	v := m.encrypted_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedPrivateKey returns the old "encrypted_private_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEncryptedPrivateKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEncryptedPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEncryptedPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedPrivateKey: %w", err)
	}
	return oldValue.EncryptedPrivateKey, nil
}

// ResetEncryptedPrivateKey resets all changes to the "encrypted_private_key" field.
func (m *UserMutation) ResetEncryptedPrivateKey() {
	m.encrypted_private_key = nil
}

// SetTotpSecret sets the "totp_secret" field.
func (m *UserMutation) SetTotpSecret(s string) {
	m.totp_secret = &s
}

// TotpSecret returns the value of the "totp_secret" field in the mutation.
func (m *UserMutation) TotpSecret() (r string, exists bool) {
	v := m.totp_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldTotpSecret returns the old "totp_secret" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTotpSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotpSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotpSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotpSecret: %w", err)
	}
	return oldValue.TotpSecret, nil
}

// ResetTotpSecret resets all changes to the "totp_secret" field.
func (m *UserMutation) ResetTotpSecret() {
	m.totp_secret = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password_client_hashing_options != nil {
		fields = append(fields, user.FieldPasswordClientHashingOptions)
	}
	if m.password_server_hashing_options != nil {
		fields = append(fields, user.FieldPasswordServerHashingOptions)
	}
	if m.password_double_hashed != nil {
		fields = append(fields, user.FieldPasswordDoubleHashed)
	}
	if m.certificate != nil {
		fields = append(fields, user.FieldCertificate)
	}
	if m.public_key != nil {
		fields = append(fields, user.FieldPublicKey)
	}
	if m.encrypted_private_key != nil {
		fields = append(fields, user.FieldEncryptedPrivateKey)
	}
	if m.totp_secret != nil {
		fields = append(fields, user.FieldTotpSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPasswordClientHashingOptions:
		return m.PasswordClientHashingOptions()
	case user.FieldPasswordServerHashingOptions:
		return m.PasswordServerHashingOptions()
	case user.FieldPasswordDoubleHashed:
		return m.PasswordDoubleHashed()
	case user.FieldCertificate:
		return m.Certificate()
	case user.FieldPublicKey:
		return m.PublicKey()
	case user.FieldEncryptedPrivateKey:
		return m.EncryptedPrivateKey()
	case user.FieldTotpSecret:
		return m.TotpSecret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPasswordClientHashingOptions:
		return m.OldPasswordClientHashingOptions(ctx)
	case user.FieldPasswordServerHashingOptions:
		return m.OldPasswordServerHashingOptions(ctx)
	case user.FieldPasswordDoubleHashed:
		return m.OldPasswordDoubleHashed(ctx)
	case user.FieldCertificate:
		return m.OldCertificate(ctx)
	case user.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case user.FieldEncryptedPrivateKey:
		return m.OldEncryptedPrivateKey(ctx)
	case user.FieldTotpSecret:
		return m.OldTotpSecret(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPasswordClientHashingOptions:
		v, ok := value.(*util.ArgonParameters)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordClientHashingOptions(v)
		return nil
	case user.FieldPasswordServerHashingOptions:
		v, ok := value.(*util.ArgonParameters)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordServerHashingOptions(v)
		return nil
	case user.FieldPasswordDoubleHashed:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordDoubleHashed(v)
		return nil
	case user.FieldCertificate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCertificate(v)
		return nil
	case user.FieldPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case user.FieldEncryptedPrivateKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedPrivateKey(v)
		return nil
	case user.FieldTotpSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotpSecret(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPasswordClientHashingOptions:
		m.ResetPasswordClientHashingOptions()
		return nil
	case user.FieldPasswordServerHashingOptions:
		m.ResetPasswordServerHashingOptions()
		return nil
	case user.FieldPasswordDoubleHashed:
		m.ResetPasswordDoubleHashed()
		return nil
	case user.FieldCertificate:
		m.ResetCertificate()
		return nil
	case user.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case user.FieldEncryptedPrivateKey:
		m.ResetEncryptedPrivateKey()
		return nil
	case user.FieldTotpSecret:
		m.ResetTotpSecret()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
