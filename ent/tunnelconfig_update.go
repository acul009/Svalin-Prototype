// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rahnit-rmm/ent/device"
	"rahnit-rmm/ent/predicate"
	"rahnit-rmm/ent/tunnelconfig"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TunnelConfigUpdate is the builder for updating TunnelConfig entities.
type TunnelConfigUpdate struct {
	config
	hooks    []Hook
	mutation *TunnelConfigMutation
}

// Where appends a list predicates to the TunnelConfigUpdate builder.
func (tcu *TunnelConfigUpdate) Where(ps ...predicate.TunnelConfig) *TunnelConfigUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetConfig sets the "config" field.
func (tcu *TunnelConfigUpdate) SetConfig(b []byte) *TunnelConfigUpdate {
	tcu.mutation.SetConfig(b)
	return tcu
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (tcu *TunnelConfigUpdate) SetDeviceID(id int) *TunnelConfigUpdate {
	tcu.mutation.SetDeviceID(id)
	return tcu
}

// SetDevice sets the "device" edge to the Device entity.
func (tcu *TunnelConfigUpdate) SetDevice(d *Device) *TunnelConfigUpdate {
	return tcu.SetDeviceID(d.ID)
}

// Mutation returns the TunnelConfigMutation object of the builder.
func (tcu *TunnelConfigUpdate) Mutation() *TunnelConfigMutation {
	return tcu.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (tcu *TunnelConfigUpdate) ClearDevice() *TunnelConfigUpdate {
	tcu.mutation.ClearDevice()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TunnelConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TunnelConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TunnelConfigUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TunnelConfigUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TunnelConfigUpdate) check() error {
	if v, ok := tcu.mutation.Config(); ok {
		if err := tunnelconfig.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "TunnelConfig.config": %w`, err)}
		}
	}
	if _, ok := tcu.mutation.DeviceID(); tcu.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TunnelConfig.device"`)
	}
	return nil
}

func (tcu *TunnelConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tunnelconfig.Table, tunnelconfig.Columns, sqlgraph.NewFieldSpec(tunnelconfig.FieldID, field.TypeInt))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Config(); ok {
		_spec.SetField(tunnelconfig.FieldConfig, field.TypeBytes, value)
	}
	if tcu.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tunnelconfig.DeviceTable,
			Columns: []string{tunnelconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tunnelconfig.DeviceTable,
			Columns: []string{tunnelconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tunnelconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TunnelConfigUpdateOne is the builder for updating a single TunnelConfig entity.
type TunnelConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TunnelConfigMutation
}

// SetConfig sets the "config" field.
func (tcuo *TunnelConfigUpdateOne) SetConfig(b []byte) *TunnelConfigUpdateOne {
	tcuo.mutation.SetConfig(b)
	return tcuo
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (tcuo *TunnelConfigUpdateOne) SetDeviceID(id int) *TunnelConfigUpdateOne {
	tcuo.mutation.SetDeviceID(id)
	return tcuo
}

// SetDevice sets the "device" edge to the Device entity.
func (tcuo *TunnelConfigUpdateOne) SetDevice(d *Device) *TunnelConfigUpdateOne {
	return tcuo.SetDeviceID(d.ID)
}

// Mutation returns the TunnelConfigMutation object of the builder.
func (tcuo *TunnelConfigUpdateOne) Mutation() *TunnelConfigMutation {
	return tcuo.mutation
}

// ClearDevice clears the "device" edge to the Device entity.
func (tcuo *TunnelConfigUpdateOne) ClearDevice() *TunnelConfigUpdateOne {
	tcuo.mutation.ClearDevice()
	return tcuo
}

// Where appends a list predicates to the TunnelConfigUpdate builder.
func (tcuo *TunnelConfigUpdateOne) Where(ps ...predicate.TunnelConfig) *TunnelConfigUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TunnelConfigUpdateOne) Select(field string, fields ...string) *TunnelConfigUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TunnelConfig entity.
func (tcuo *TunnelConfigUpdateOne) Save(ctx context.Context) (*TunnelConfig, error) {
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TunnelConfigUpdateOne) SaveX(ctx context.Context) *TunnelConfig {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TunnelConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TunnelConfigUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TunnelConfigUpdateOne) check() error {
	if v, ok := tcuo.mutation.Config(); ok {
		if err := tunnelconfig.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "TunnelConfig.config": %w`, err)}
		}
	}
	if _, ok := tcuo.mutation.DeviceID(); tcuo.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TunnelConfig.device"`)
	}
	return nil
}

func (tcuo *TunnelConfigUpdateOne) sqlSave(ctx context.Context) (_node *TunnelConfig, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tunnelconfig.Table, tunnelconfig.Columns, sqlgraph.NewFieldSpec(tunnelconfig.FieldID, field.TypeInt))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TunnelConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tunnelconfig.FieldID)
		for _, f := range fields {
			if !tunnelconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tunnelconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Config(); ok {
		_spec.SetField(tunnelconfig.FieldConfig, field.TypeBytes, value)
	}
	if tcuo.mutation.DeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tunnelconfig.DeviceTable,
			Columns: []string{tunnelconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tunnelconfig.DeviceTable,
			Columns: []string{tunnelconfig.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TunnelConfig{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tunnelconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
