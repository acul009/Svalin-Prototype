// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/rahn-it/svalin/ent/revocation"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Revocation is the model entity for the Revocation schema.
type Revocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Revocation holds the value of the "revocation" field.
	Revocation []byte `json:"revocation,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Hasher holds the value of the "hasher" field.
	Hasher       uint64 `json:"hasher,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Revocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case revocation.FieldRevocation:
			values[i] = new([]byte)
		case revocation.FieldID, revocation.FieldHasher:
			values[i] = new(sql.NullInt64)
		case revocation.FieldHash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Revocation fields.
func (r *Revocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case revocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case revocation.FieldRevocation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field revocation", values[i])
			} else if value != nil {
				r.Revocation = *value
			}
		case revocation.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				r.Hash = value.String
			}
		case revocation.FieldHasher:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hasher", values[i])
			} else if value.Valid {
				r.Hasher = uint64(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Revocation.
// This includes values selected through modifiers, order, etc.
func (r *Revocation) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Revocation.
// Note that you need to call Revocation.Unwrap() before calling this method if this Revocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Revocation) Update() *RevocationUpdateOne {
	return NewRevocationClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Revocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Revocation) Unwrap() *Revocation {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Revocation is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Revocation) String() string {
	var builder strings.Builder
	builder.WriteString("Revocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("revocation=")
	builder.WriteString(fmt.Sprintf("%v", r.Revocation))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(r.Hash)
	builder.WriteString(", ")
	builder.WriteString("hasher=")
	builder.WriteString(fmt.Sprintf("%v", r.Hasher))
	builder.WriteByte(')')
	return builder.String()
}

// Revocations is a parsable slice of Revocation.
type Revocations []*Revocation
